name: Publish Homebrew

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.26.15)'
        required: true
        type: string

jobs:
  publish-homebrew:
    name: Generate and publish Homebrew formulas
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List available releases
        run: |
          echo "Available releases:"
          curl -s https://api.github.com/repos/Guepard-Corp/guepard-cli/releases | jq -r '.[].tag_name' | head -10
          echo ""
          echo "You can use any of these versions (with or without 'v' prefix)"

      - name: Set version
        id: ver
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${INPUT_VERSION#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Processing version: ${VERSION}"

      - name: Download all platform releases
        run: |
          mkdir -p release-assets
          cd release-assets
          curl -L -o macos-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/v${{ steps.ver.outputs.version }}/guepard-cli-v${{ steps.ver.outputs.version }}-macos-arm64.tar.gz" || true
          curl -L -o macos-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/v${{ steps.ver.outputs.version }}/guepard-cli-v${{ steps.ver.outputs.version }}-macos-amd64.tar.gz" || true
          curl -L -o linux-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/v${{ steps.ver.outputs.version }}/guepard-cli-v${{ steps.ver.outputs.version }}-linux-arm64.tar.gz" || true
          curl -L -o linux-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/v${{ steps.ver.outputs.version }}/guepard-cli-v${{ steps.ver.outputs.version }}-linux-amd64.tar.gz" || true
          
          echo "Downloaded files:"
          ls -la *.tar.gz || echo "No tar.gz files found"

      - name: Calculate SHA256 checksums
        run: |
          echo "Calculating SHA256 checksums..."
          [ -f release-assets/macos-arm64.tar.gz ] && echo "MACOS_ARM64_SHA256=$(shasum -a 256 release-assets/macos-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          [ -f release-assets/macos-amd64.tar.gz ] && echo "MACOS_AMD64_SHA256=$(shasum -a 256 release-assets/macos-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          [ -f release-assets/linux-arm64.tar.gz ] && echo "LINUX_ARM64_SHA256=$(shasum -a 256 release-assets/linux-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          [ -f release-assets/linux-amd64.tar.gz ] && echo "LINUX_AMD64_SHA256=$(shasum -a 256 release-assets/linux-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          
          echo "SHA256 values:"
          echo "MACOS_ARM64_SHA256=${MACOS_ARM64_SHA256:-NOT_FOUND}"
          echo "MACOS_AMD64_SHA256=${MACOS_AMD64_SHA256:-NOT_FOUND}"
          echo "LINUX_ARM64_SHA256=${LINUX_ARM64_SHA256:-NOT_FOUND}"
          echo "LINUX_AMD64_SHA256=${LINUX_AMD64_SHA256:-NOT_FOUND}"

      - name: Generate Homebrew formulas (bash)
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          set -euo pipefail
          TAG="v${VERSION}"
          : "${MACOS_ARM64_SHA256?MACOS_ARM64_SHA256 missing}"
          mkdir -p Formula

          # Core formula (defaults to macOS ARM64; adds macOS Intel override only)
          cat > Formula/guepard.rb <<'RUBY'
          class Guepard < Formula
            desc "Guepard CLI - Git for Data"
            homepage "https://www.guepard.run"
            url "https://github.com/Guepard-Corp/guepard-cli/releases/download/V_TAG/guepard-cli-V_TAG-macos-arm64.tar.gz"
            version "VERSION"
            sha256 "MACOS_ARM64_SHA256"
            license "Guepard (c) 2025"

            on_macos do
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/V_TAG/guepard-cli-V_TAG-macos-amd64.tar.gz"
                sha256 "MACOS_AMD64_SHA256"
              end
            end

            on_linux do
              on_arm do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/V_TAG/guepard-cli-V_TAG-linux-arm64.tar.gz"
                sha256 "LINUX_ARM64_SHA256"
              end
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/V_TAG/guepard-cli-V_TAG-linux-amd64.tar.gz"
                sha256 "LINUX_AMD64_SHA256"
              end
            end

            def install
              bin.install "guepard"
            end

            test do
              system "#{bin}/guepard", "--version"
            end
          end
          RUBY

          # Substitute placeholders
          sed -i.bak "s/V_TAG/${TAG}/g; s/VERSION/${VERSION}/g" Formula/guepard.rb
          sed -i.bak "s/MACOS_ARM64_SHA256/${MACOS_ARM64_SHA256}/g" Formula/guepard.rb
          sed -i.bak "s/MACOS_AMD64_SHA256/${MACOS_AMD64_SHA256:-}/g" Formula/guepard.rb || true
          sed -i.bak "s/LINUX_ARM64_SHA256/${LINUX_ARM64_SHA256:-}/g" Formula/guepard.rb || true
          sed -i.bak "s/LINUX_AMD64_SHA256/${LINUX_AMD64_SHA256:-}/g" Formula/guepard.rb || true
          rm -f Formula/*.bak

      - name: Commit and push formulas to repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/guepard.rb
          git commit -m "chore(homebrew): update formulas for v${{ steps.ver.outputs.version }}"
          git push origin main
