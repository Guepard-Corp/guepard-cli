# This is a GitHub Actions workflow that builds and creates releases for a Rust project.
# It triggers on every push to the main branch.
name: Release

on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in the workflow.
env:
  CARGO_TERM_COLOR: always # Ensures cargo commands output colorized text.
  APP_NAME: gprd # The name of your application binary, as defined in Cargo.toml.

jobs:
  # This job builds the application for different target platforms.
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }} # The job will run on the OS specified in the matrix.
    strategy:
      fail-fast: false # Allow all jobs to complete even if one fails.
      matrix:
        include:
          # AMD64 (x86_64) Builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: guepard-cli-linux-amd64.deb
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: guepard-cli-macos-amd64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: guepard-cli-windows-amd64.zip
          # ARM64 (aarch64) Builds
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: guepard-cli-linux-arm64.deb
          - os: macos-14 # Native ARM runner for Apple Silicon
            target: aarch64-apple-darwin
            artifact_name: guepard-cli-macos-arm64.tar.gz
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: guepard-cli-windows-arm64.zip

    steps:
      # Step 1: Check out the repository's code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install the Rust toolchain.
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Use the stable Rust toolchain.
          target: ${{ matrix.target }} # Specify the target architecture.
          override: true # Override the default toolchain.

      # Step 3: Install system dependencies for Linux builds (both native and cross-compile).
      - name: Install Linux dependencies and cross-compiler
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev libssl-dev pkg-config gcc-aarch64-linux-gnu

      # Step 4: Build the application for each specific OS and architecture.
      - name: Build (Linux AMD64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Build (macOS & Windows)
        if: runner.os == 'macOS' || runner.os == 'Windows'
        run: cargo build --release --target ${{ matrix.target }}
        
      # Step 5: Package the release artifacts for each specific OS and architecture.
      - name: Package (Linux AMD64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include
        run: |
          cargo install cargo-deb
          cargo deb --target ${{ matrix.target }}

      - name: Package (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo install cargo-deb
          cargo deb --target ${{ matrix.target }}

      - name: Package (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.APP_NAME }} artifacts/
          cp README.md artifacts/
          tar -czf ${{ matrix.artifact_name }} -C artifacts .
      
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\${{ env.APP_NAME }}.exe artifacts\
          copy README.md artifacts\
          Compress-Archive -Path artifacts\* -DestinationPath ${{ matrix.artifact_name }}

      # Step 6: Upload the packaged artifact.
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ runner.os == 'Linux' && format('target/debian/*.deb') || '' }}
            ${{ runner.os != 'Linux' && matrix.artifact_name || '' }}
