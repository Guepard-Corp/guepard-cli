# This is a GitHub Actions workflow that builds and creates releases for a Rust project.
# It triggers on every push to the main branch.
name: Release

on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in the workflow.
env:
  CARGO_TERM_COLOR: always # Ensures cargo commands output colorized text.
  APP_NAME: gprd # The name of your application binary, as defined in Cargo.toml.

jobs:
  # This job builds the application for different target platforms.
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }} # The job will run on the OS specified in the matrix.
    strategy:
      matrix:
        # Defines the different operating systems to run the build on.
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          # Configuration for ubuntu-latest (Linux).
          - os: ubuntu-latest
            artifact_name: ${{ env.APP_NAME }}-linux-amd64.deb
            target: x86_64-unknown-linux-gnu
          # Configuration for macos-latest.
          - os: macos-latest
            artifact_name: ${{ env.APP_NAME }}-macos-amd64.tar.gz
            target: x86_64-apple-darwin
          # Configuration for windows-latest.
          - os: windows-latest
            artifact_name: ${{ env.APP_NAME }}-windows-amd64.zip
            target: x86_64-pc-windows-msvc

    steps:
      # Step 1: Check out the repository's code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install the Rust toolchain.
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Use the stable Rust toolchain.
          target: ${{ matrix.target }} # Specify the target architecture.
          override: true # Override the default toolchain.

      # Step 3: Install system dependencies for Linux.
      # This is crucial for crates like 'keyring' and 'reqwest'.
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev libssl-dev pkg-config

      # Step 4: Build the application in release mode.
      - name: Build application
        run: cargo build --release --target ${{ matrix.target }}
        # Set OpenSSL env vars for Linux to ensure build consistency.
        env:
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include

      # Step 5: Package the release artifacts. This step is different for each OS.
      # For Linux, we install cargo-deb and create a .deb package.
      - name: Package (Linux)
        if: runner.os == 'Linux'
        run: |
          cargo install cargo-deb
          cargo deb --target ${{ matrix.target }}
        # Set OpenSSL env vars for Linux to ensure build consistency.
        env:
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include
      
      # For macOS, we use tar to create a compressed archive.
      - name: Package (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.APP_NAME }} artifacts/
          cp README.md artifacts/
          tar -czf ${{ matrix.artifact_name }} -C artifacts .
      
      # For Windows, we use PowerShell to create a zip file.
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\${{ env.APP_NAME }}.exe artifacts\
          copy README.md artifacts\
          Compress-Archive -Path artifacts\* -DestinationPath ${{ matrix.artifact_name }}

      # Step 6: Upload the packaged artifact.
      # The path is different for the .deb file.
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ runner.os == 'Linux' && format('target/debian/*.deb') || '' }}
            ${{ runner.os != 'Linux' && matrix.artifact_name || '' }}
