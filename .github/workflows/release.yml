name: Smart Release

on:
  push:
    tags:
      - 'v*-linux'
      - 'v*-macos'
      - 'v*-windows'
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  detect-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      version: ${{ steps.detect.outputs.version }}
    steps:
      - name: Detect platforms from tag
        id: detect
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo "$TAG" | sed 's/-.*$//')
          
          PLATFORMS=""
          
          # Check for specific platform tags
          if [[ "$TAG" == *"-linux"* ]]; then
            PLATFORMS="$PLATFORMS linux"
          fi
          if [[ "$TAG" == *"-macos"* ]]; then
            PLATFORMS="$PLATFORMS macos"
          fi
          if [[ "$TAG" == *"-windows"* ]]; then
            PLATFORMS="$PLATFORMS windows"
          fi
          
          # If no platform specified in tag, build all
          if [[ -z "$PLATFORMS" ]]; then
            PLATFORMS="linux macos windows"
          fi
          
          # Trim leading space
          PLATFORMS=$(echo "$PLATFORMS" | sed 's/^ *//')
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected platforms: '$PLATFORMS'"
          echo "Version: $VERSION"

  build-linux:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install ARM64 cross-compilation tools
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Verify and install Rust targets
        run: |
          echo "Installed targets:"
          rustup target list --installed
          echo "Installing ARM64 target explicitly..."
          rustup target add aarch64-unknown-linux-gnu
          echo "Verifying ARM64 target is installed:"
          rustup target list --installed | grep aarch64-unknown-linux-gnu

      - name: Configure cross-compilation environment
        run: |
          # Set up cross-compilation environment variables
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build Linux AMD64
        run: |
          echo "Building Linux AMD64..."
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p dist/linux-amd64
          cp target/x86_64-unknown-linux-gnu/release/guepard dist/linux-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz -C dist linux-amd64/

      - name: Build Linux ARM64
        run: |
          echo "Building Linux ARM64..."
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p dist/linux-arm64
          cp target/aarch64-unknown-linux-gnu/release/guepard dist/linux-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz -C dist linux-arm64/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-*.tar.gz

  build-macos:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'macos')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-apple-darwin,aarch64-apple-darwin
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip

      - name: Debug platform detection
        run: |
          echo "Detected platforms: '${{ needs.detect-platforms.outputs.platforms }}'"
          echo "Building macOS..."

      - name: Build macOS AMD64
        run: |
          echo "Building macOS AMD64..."
          cargo build --release --target x86_64-apple-darwin
          mkdir -p dist/macos-amd64
          cp target/x86_64-apple-darwin/release/guepard dist/macos-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz -C dist macos-amd64/

      - name: Build macOS ARM64
        run: |
          echo "Building macOS ARM64..."
          cargo build --release --target aarch64-apple-darwin
          mkdir -p dist/macos-arm64
          cp target/aarch64-apple-darwin/release/guepard dist/macos-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz -C dist macos-arm64/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-*.tar.gz

  build-windows:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'windows')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install Windows cross-compilation tools
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Configure Windows cross-compilation environment
        run: |
          # Set up Windows cross-compilation environment variables
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      - name: Build Windows AMD64
        run: |
          echo "Building Windows AMD64..."
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir -p dist/windows-amd64
          cp target/x86_64-pc-windows-gnu/release/guepard.exe dist/windows-amd64/
          cd dist
          zip -r guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip windows-amd64/

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip

  create-release:
    needs: [detect-platforms, build-linux, build-macos, build-windows]
    if: always() && needs.detect-platforms.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p dist
          # Copy artifacts to dist folder
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          find artifacts -name "*.zip" -exec cp {} dist/ \;

      - name: Calculate SHA256 checksums
        run: |
          cd dist
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              # Extract platform and architecture from filename
              if [[ "$file" == *"linux-amd64"* ]]; then
                echo "LINUX_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"linux-arm64"* ]]; then
                echo "LINUX_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-amd64"* ]]; then
                echo "MACOS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-arm64"* ]]; then
                echo "MACOS_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"windows-amd64"* ]]; then
                echo "WINDOWS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              fi
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Guepard CLI ${{ needs.detect-platforms.outputs.version }}
          body: |
            ## Guepard CLI ${{ needs.detect-platforms.outputs.version }}

            ### Platforms Released
            ${{ needs.detect-platforms.outputs.platforms }}

            ### Installation

            #### macOS (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Linux (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Windows (Chocolatey)
            ```powershell
            choco install guepard
            ```

            ### SHA256 Checksums
            - Linux AMD64: `${{ env.LINUX_AMD64_SHA256 }}`
            - Linux ARM64: `${{ env.LINUX_ARM64_SHA256 }}`
            - macOS AMD64: `${{ env.MACOS_AMD64_SHA256 }}`
            - macOS ARM64: `${{ env.MACOS_ARM64_SHA256 }}`
            - Windows AMD64: `${{ env.WINDOWS_AMD64_SHA256 }}`

            ### What's New
            - Multi-platform support
            - Git-like filesystem for databases
            - Familiar command interface
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: [detect-platforms, create-release]
    if: contains(needs.detect-platforms.outputs.platforms, 'macos') || contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: Guepard-Corp/homebrew-guepard-cli
          token: ${{ secrets.GITHUB_TOKEN }}
          path: homebrew-tap

      - name: Download release assets
        run: |
          mkdir -p release-assets
          cd release-assets
          
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          
          # Download available assets
          if [[ "${{ needs.detect-platforms.outputs.platforms }}" == *"macos"* ]]; then
            curl -L -o macos-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-macos-arm64.tar.gz" || echo "macOS ARM64 not available"
            curl -L -o macos-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-macos-amd64.tar.gz" || echo "macOS AMD64 not available"
          fi
          
          if [[ "${{ needs.detect-platforms.outputs.platforms }}" == *"linux"* ]]; then
            curl -L -o linux-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-linux-arm64.tar.gz" || echo "Linux ARM64 not available"
            curl -L -o linux-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-linux-amd64.tar.gz" || echo "Linux AMD64 not available"
          fi

      - name: Calculate SHA256 checksums
        run: |
          if [ -f "release-assets/macos-arm64.tar.gz" ]; then
            echo "MACOS_ARM64_SHA256=$(shasum -a 256 release-assets/macos-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/macos-amd64.tar.gz" ]; then
            echo "MACOS_AMD64_SHA256=$(shasum -a 256 release-assets/macos-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/linux-arm64.tar.gz" ]; then
            echo "LINUX_ARM64_SHA256=$(shasum -a 256 release-assets/linux-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/linux-amd64.tar.gz" ]; then
            echo "LINUX_AMD64_SHA256=$(shasum -a 256 release-assets/linux-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi

      - name: Update Homebrew formula
        run: |
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          cat > homebrew-tap/Formula/guepard.rb << EOF
          class Guepard < Formula
            desc "Guepard CLI - Git-like filesystem for databases"
            homepage "https://www.guepard.run"
            url "https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-macos-arm64.tar.gz"
            version "\${VERSION}"
            sha256 "${{ env.MACOS_ARM64_SHA256 || '0000000000000000000000000000000000000000000000000000000000000000' }}"
            license "Guepard (c) 2025"

            on_macos do
              on_arm do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-macos-arm64.tar.gz"
                sha256 "${{ env.MACOS_ARM64_SHA256 || '0000000000000000000000000000000000000000000000000000000000000000' }}"
              end
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-macos-amd64.tar.gz"
                sha256 "${{ env.MACOS_AMD64_SHA256 || '0000000000000000000000000000000000000000000000000000000000000000' }}"
              end
            end

            on_linux do
              on_arm do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-linux-arm64.tar.gz"
                sha256 "${{ env.LINUX_ARM64_SHA256 || '0000000000000000000000000000000000000000000000000000000000000000' }}"
              end
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-linux-amd64.tar.gz"
                sha256 "${{ env.LINUX_AMD64_SHA256 || '0000000000000000000000000000000000000000000000000000000000000000' }}"
              end
            end

            def install
              bin.install "guepard"
            end

            test do
              system "#{bin}/guepard", "--version"
            end
          end
          EOF

      - name: Commit and push Homebrew formula
        run: |
          cd homebrew-tap
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/guepard.rb
          git commit -m "Update guepard to ${{ needs.detect-platforms.outputs.version }}"
          git push

  update-snap:
    needs: [detect-platforms, create-release]
    if: contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux AMD64 release
        run: |
          curl -L -o linux-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz"

      - name: Calculate SHA256 checksum
        run: |
          echo "LINUX_AMD64_SHA256=$(shasum -a 256 linux-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Update snapcraft.yaml
        run: |
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          cat > snap/snapcraft.yaml << EOF
          name: guepard
          base: core22
          version: '\${VERSION}'
          summary: Guepard CLI - Git-like filesystem for databases
          description: |
            Guepard CLI provides a Git-like filesystem for databases, offering version control 
            and management capabilities for database schemas and data. It supports familiar 
            commands like init, commit, branch, checkout, and more.
            
            Features:
            - Git-like interface with familiar commands
            - Multi-platform support (Linux, macOS, Windows)
            - Database management and deployment
            - Cross-platform consistency

          grade: stable
          confinement: strict

          parts:
            guepard:
              plugin: dump
              source: https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-linux-amd64.tar.gz
              source-checksum: sha256/${{ env.LINUX_AMD64_SHA256 }}
              organize:
                guepard: bin/guepard

          apps:
            guepard:
              command: bin/guepard
              plugs:
                - home
                - network
                - removable-media

          slots:
            guepard:
              command: bin/guepard
              interface: content
              read:
                - \$SNAP_USER_DATA
              write:
                - \$SNAP_USER_DATA
          EOF

      - name: Commit snapcraft.yaml update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add snap/snapcraft.yaml
          git commit -m "Update snapcraft.yaml to ${{ needs.detect-platforms.outputs.version }}"
          git push

  update-chocolatey:
    needs: [detect-platforms, create-release]
    if: contains(needs.detect-platforms.outputs.platforms, 'windows')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows release
        run: |
          curl -L -o windows-amd64.zip "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip"

      - name: Calculate SHA256 checksum
        run: |
          echo "WINDOWS_AMD64_SHA256=$(shasum -a 256 windows-amd64.zip | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Update Chocolatey package
        run: |
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          
          # Update nuspec file
          cat > chocolatey/guepard.nuspec << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>guepard</id>
              <version>\${VERSION}</version>
              <title>Guepard CLI</title>
              <authors>Guepard Engineering</authors>
              <owners>Guepard Engineering</owners>
              <projectUrl>https://www.guepard.run</projectUrl>
              <packageSourceUrl>https://github.com/Guepard-Corp/guepard-cli</packageSourceUrl>
              <docsUrl>https://docs.guepard.run</docsUrl>
              <bugTrackerUrl>https://github.com/Guepard-Corp/guepard-cli/issues</bugTrackerUrl>
              <tags>database filesystem cli git versioning</tags>
              <summary>Guepard CLI - Git-like filesystem for databases</summary>
              <description>
          Guepard CLI provides a Git-like filesystem for databases, offering version control 
          and management capabilities for database schemas and data. It supports familiar 
          commands like init, commit, branch, checkout, and more.

          Features:
          - Git-like interface with familiar commands
          - Multi-platform support (Linux, macOS, Windows)
          - Database management and deployment
          - Cross-platform consistency

          Installation:
          After installation, you can use 'guepard' command from any terminal.

          Usage:
            guepard init .                    # Initialize a new Guepard repository
            guepard deploy --database_provider=MySQL --database_version=8
            guepard commit -m "Initial version"
            guepard branch                    # List branches
            guepard checkout develop          # Switch to a branch
            guepard log                       # View commit history
            guepard compute status            # Manage compute instances
              </description>
              <releaseNotes>
          Version \${VERSION}:
          - Updated to version \${VERSION} with improved stability and performance
          - Bug fixes and enhancements
          - Multi-platform support maintained
              </releaseNotes>
              <copyright>Guepard (c) 2025</copyright>
              <licenseUrl>https://www.guepard.run/license</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
            </files>
          </package>
          EOF

          # Update PowerShell install script
          cat > chocolatey/tools/chocolateyInstall.ps1 << EOF
          # Guepard CLI Chocolatey Package Installation Script

          \$ErrorActionPreference = 'Stop'

          \$packageName = 'guepard'
          \$url = 'https://github.com/Guepard-Corp/guepard-cli/releases/download/\${VERSION}/guepard-cli-\${VERSION}-windows-amd64.zip'
          \$checksum = '${{ env.WINDOWS_AMD64_SHA256 }}'
          \$checksumType = 'sha256'

          # Download and extract
          \$tempDir = Join-Path \$env:TEMP \$packageName
          if (Test-Path \$tempDir) {
              Remove-Item \$tempDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path \$tempDir | Out-Null

          Write-Host "Downloading Guepard CLI..."
          \$zipFile = Join-Path \$tempDir "guepard-cli.zip"
          Invoke-WebRequest -Uri \$url -OutFile \$zipFile

          # Verify checksum
          \$fileHash = Get-FileHash -Path \$zipFile -Algorithm SHA256
          if (\$fileHash.Hash -ne \$checksum) {
              throw "Checksum verification failed. Expected: \$checksum, Got: \$(\$fileHash.Hash)"
          }

          Write-Host "Extracting Guepard CLI..."
          Expand-Archive -Path \$zipFile -DestinationPath \$tempDir -Force

          # Install to chocolatey bin directory
          \$binDir = Join-Path \$env:ChocolateyInstall "bin"
          if (-not (Test-Path \$binDir)) {
              New-Item -ItemType Directory -Path \$binDir | Out-Null
          }

          \$exePath = Join-Path \$tempDir "windows-amd64\guepard.exe"
          if (Test-Path \$exePath) {
              Copy-Item \$exePath \$binDir -Force
              Write-Host "Guepard CLI installed successfully!"
              Write-Host "You can now use 'guepard' command from any terminal."
          } else {
              throw "guepard.exe not found in downloaded package"
          }

          # Cleanup
          Remove-Item \$tempDir -Recurse -Force
          EOF

      - name: Commit Chocolatey package updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add chocolatey/
          git commit -m "Update Chocolatey package to ${{ needs.detect-platforms.outputs.version }}"
          git push