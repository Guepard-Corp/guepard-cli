name: Smart Release

on:
  push:
    tags:
      - 'v*-linux'
      - 'v*-macos'
      - 'v*-windows'
      - 'v*'

jobs:
  detect-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      version: ${{ steps.detect.outputs.version }}
    steps:
      - name: Detect platforms from tag
        id: detect
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo "$TAG" | sed 's/-.*$//')
          
          PLATFORMS=""
          
          if [[ "$TAG" == *"-linux"* ]]; then
            PLATFORMS="$PLATFORMS linux"
          fi
          if [[ "$TAG" == *"-macos"* ]]; then
            PLATFORMS="$PLATFORMS macos"
          fi
          if [[ "$TAG" == *"-windows"* ]]; then
            PLATFORMS="$PLATFORMS windows"
          fi
          
          # If no platform specified, build all
          if [[ -z "$PLATFORMS" ]]; then
            PLATFORMS="linux macos windows"
          fi
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected platforms: $PLATFORMS"
          echo "Version: $VERSION"

  build-and-release:
    needs: detect-platforms
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu,x86_64-apple-darwin,aarch64-apple-darwin,x86_64-pc-windows-msvc
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip

      - name: Build Linux AMD64
        if: contains(needs.detect-platforms.outputs.platforms, 'linux')
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p dist/linux-amd64
          cp target/x86_64-unknown-linux-gnu/release/guepard dist/linux-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz -C dist linux-amd64/

      - name: Build Linux ARM64
        if: contains(needs.detect-platforms.outputs.platforms, 'linux')
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p dist/linux-arm64
          cp target/aarch64-unknown-linux-gnu/release/guepard dist/linux-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz -C dist linux-arm64/

      - name: Build macOS AMD64
        if: contains(needs.detect-platforms.outputs.platforms, 'macos')
        run: |
          cargo build --release --target x86_64-apple-darwin
          mkdir -p dist/macos-amd64
          cp target/x86_64-apple-darwin/release/guepard dist/macos-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz -C dist macos-amd64/

      - name: Build macOS ARM64
        if: contains(needs.detect-platforms.outputs.platforms, 'macos')
        run: |
          cargo build --release --target aarch64-apple-darwin
          mkdir -p dist/macos-arm64
          cp target/aarch64-apple-darwin/release/guepard dist/macos-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz -C dist macos-arm64/

      - name: Build Windows AMD64
        if: contains(needs.detect-platforms.outputs.platforms, 'windows')
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
          mkdir -p dist/windows-amd64
          cp target/x86_64-pc-windows-msvc/release/guepard.exe dist/windows-amd64/
          cd dist
          zip -r guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip windows-amd64/

      - name: Calculate SHA256 checksums
        run: |
          cd dist
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              echo "${file}_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Guepard CLI ${{ needs.detect-platforms.outputs.version }}
          body: |
            ## Guepard CLI ${{ needs.detect-platforms.outputs.version }}

            ### Platforms Released
            ${{ needs.detect-platforms.outputs.platforms }}

            ### Installation

            #### macOS (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Linux (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Windows (Chocolatey)
            ```powershell
            choco install guepard
            ```

            ### SHA256 Checksums
            ${{ env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz_SHA256 && format('* Linux AMD64: `{0}`', env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz_SHA256) || '' }}
            ${{ env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz_SHA256 && format('* Linux ARM64: `{0}`', env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz_SHA256) || '' }}
            ${{ env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz_SHA256 && format('* macOS AMD64: `{0}`', env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz_SHA256) || '' }}
            ${{ env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz_SHA256 && format('* macOS ARM64: `{0}`', env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz_SHA256) || '' }}
            ${{ env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip_SHA256 && format('* Windows AMD64: `{0}`', env.guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip_SHA256) || '' }}

            ### What's New
            - Multi-platform support
            - Git-like filesystem for databases
            - Familiar command interface
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: [detect-platforms, build-and-release]
    if: contains(needs.detect-platforms.outputs.platforms, 'macos') || contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: Guepard-Corp/homebrew-guepard-cli
          token: ${{ secrets.GITHUB_TOKEN }}
          path: homebrew-tap

      - name: Download release assets
        run: |
          mkdir -p release-assets
          cd release-assets
          
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          
          # Download available assets
          if [[ "${{ needs.detect-platforms.outputs.platforms }}" == *"macos"* ]]; then
            curl -L -o macos-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-macos-arm64.tar.gz" || echo "macOS ARM64 not available"
            curl -L -o macos-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-macos-amd64.tar.gz" || echo "macOS AMD64 not available"
          fi
          
          if [[ "${{ needs.detect-platforms.outputs.platforms }}" == *"linux"* ]]; then
            curl -L -o linux-arm64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-linux-arm64.tar.gz" || echo "Linux ARM64 not available"
            curl -L -o linux-amd64.tar.gz "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-$VERSION-linux-amd64.tar.gz" || echo "Linux AMD64 not available"
          fi

      - name: Calculate SHA256 checksums
        run: |
          if [ -f "release-assets/macos-arm64.tar.gz" ]; then
            echo "MACOS_ARM64_SHA256=$(shasum -a 256 release-assets/macos-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/macos-amd64.tar.gz" ]; then
            echo "MACOS_AMD64_SHA256=$(shasum -a 256 release-assets/macos-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/linux-arm64.tar.gz" ]; then
            echo "LINUX_ARM64_SHA256=$(shasum -a 256 release-assets/linux-arm64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi
          if [ -f "release-assets/linux-amd64.tar.gz" ]; then
            echo "LINUX_AMD64_SHA256=$(shasum -a 256 release-assets/linux-amd64.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          fi

      - name: Update Homebrew formula
        run: |
          VERSION="${{ needs.detect-platforms.outputs.version }}"
          cat > homebrew-tap/Formula/guepard.rb << EOF
          class Guepard < Formula
            desc "Guepard CLI - Git-like filesystem for databases"
            homepage "https://www.guepard.run"
            url "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-\${VERSION}-macos-arm64.tar.gz"
            version "\${VERSION}"
            sha256 "${{ env.MACOS_ARM64_SHA256 || 'placeholder' }}"
            license "Guepard (c) 2025"

            on_macos do
              on_arm do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-\${VERSION}-macos-arm64.tar.gz"
                sha256 "${{ env.MACOS_ARM64_SHA256 || 'placeholder' }}"
              end
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-\${VERSION}-macos-amd64.tar.gz"
                sha256 "${{ env.MACOS_AMD64_SHA256 || 'placeholder' }}"
              end
            end

            on_linux do
              on_arm do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-\${VERSION}-linux-arm64.tar.gz"
                sha256 "${{ env.LINUX_ARM64_SHA256 || 'placeholder' }}"
              end
              on_intel do
                url "https://github.com/Guepard-Corp/guepard-cli/releases/download/${{ github.ref_name }}/guepard-cli-\${VERSION}-linux-amd64.tar.gz"
                sha256 "${{ env.LINUX_AMD64_SHA256 || 'placeholder' }}"
              end
            end

            def install
              bin.install "guepard"
            end

            test do
              system "#{bin}/guepard", "--version"
            end
          end
          EOF

      - name: Commit and push Homebrew formula
        run: |
          cd homebrew-tap
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/guepard.rb
          git commit -m "Update guepard to ${{ needs.detect-platforms.outputs.version }}"
          git push