name: Build and Release

on:
  push:
    tags:
      - 'v*-linux'
      - 'v*-macos'
      - 'v*-windows'
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  detect-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      version: ${{ steps.detect.outputs.version }}
    steps:
      - name: Detect platforms from tag
        id: detect
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo "$TAG" | sed 's/-.*$//')
          
          PLATFORMS=""
          
          # Check for specific platform tags
          if [[ "$TAG" == *"-linux"* ]]; then
            PLATFORMS="$PLATFORMS linux"
          fi
          if [[ "$TAG" == *"-macos"* ]]; then
            PLATFORMS="$PLATFORMS macos"
          fi
          if [[ "$TAG" == *"-windows"* ]]; then
            PLATFORMS="$PLATFORMS windows"
          fi
          
          # If no platform specified in tag, build all
          if [[ -z "$PLATFORMS" ]]; then
            PLATFORMS="linux macos windows"
          fi
          
          # Trim leading space
          PLATFORMS=$(echo "$PLATFORMS" | sed 's/^ *//')
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected platforms: '$PLATFORMS'"
          echo "Version: $VERSION"

  build-linux:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install ARM64 cross-compilation tools
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Verify and install Rust targets
        run: |
          echo "Installed targets:"
          rustup target list --installed
          echo "Installing ARM64 target explicitly..."
          rustup target add aarch64-unknown-linux-gnu
          echo "Verifying ARM64 target is installed:"
          rustup target list --installed | grep aarch64-unknown-linux-gnu

      - name: Configure cross-compilation environment
        run: |
          # Set up cross-compilation environment variables
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build Linux AMD64
        run: |
          echo "Building Linux AMD64..."
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p dist/linux-amd64
          cp target/x86_64-unknown-linux-gnu/release/guepard dist/linux-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz -C dist linux-amd64/

      - name: Build Linux ARM64
        run: |
          echo "Building Linux ARM64..."
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p dist/linux-arm64
          cp target/aarch64-unknown-linux-gnu/release/guepard dist/linux-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz -C dist linux-arm64/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-*.tar.gz

  build-macos:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'macos')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-apple-darwin,aarch64-apple-darwin
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip

      - name: Debug platform detection
        run: |
          echo "Detected platforms: '${{ needs.detect-platforms.outputs.platforms }}'"
          echo "Building macOS..."

      - name: Build macOS AMD64
        run: |
          echo "Building macOS AMD64..."
          cargo build --release --target x86_64-apple-darwin
          mkdir -p dist/macos-amd64
          cp target/x86_64-apple-darwin/release/guepard dist/macos-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz -C dist macos-amd64/

      - name: Build macOS ARM64
        run: |
          echo "Building macOS ARM64..."
          cargo build --release --target aarch64-apple-darwin
          mkdir -p dist/macos-arm64
          cp target/aarch64-apple-darwin/release/guepard dist/macos-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz -C dist macos-arm64/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-*.tar.gz

  build-windows:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'windows')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install Windows cross-compilation tools
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Configure Windows cross-compilation environment
        run: |
          # Set up Windows cross-compilation environment variables
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      - name: Build Windows AMD64
        run: |
          echo "Building Windows AMD64..."
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir -p dist/windows-amd64
          cp target/x86_64-pc-windows-gnu/release/guepard.exe dist/windows-amd64/
          cd dist
          zip -r guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip windows-amd64/

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip

  create-release:
    needs: [detect-platforms, build-linux, build-macos, build-windows]
    if: always() && needs.detect-platforms.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p dist
          # Copy artifacts to dist folder
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          find artifacts -name "*.zip" -exec cp {} dist/ \;

      - name: Calculate SHA256 checksums
        run: |
          cd dist
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              # Extract platform and architecture from filename
              if [[ "$file" == *"linux-amd64"* ]]; then
                echo "LINUX_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"linux-arm64"* ]]; then
                echo "LINUX_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-amd64"* ]]; then
                echo "MACOS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-arm64"* ]]; then
                echo "MACOS_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"windows-amd64"* ]]; then
                echo "WINDOWS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              fi
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Guepard CLI ${{ needs.detect-platforms.outputs.version }}
          body: |
            ## Guepard CLI ${{ needs.detect-platforms.outputs.version }}

            ### Platforms Released
            ${{ needs.detect-platforms.outputs.platforms }}

            ### Installation

            #### macOS (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Linux (Homebrew)
            ```bash
            brew tap guepard-corp/guepard-cli
            brew install guepard
            ```

            #### Windows (Chocolatey)
            ```powershell
            choco install guepard
            ```

            ### SHA256 Checksums
            - Linux AMD64: `${{ env.LINUX_AMD64_SHA256 }}`
            - Linux ARM64: `${{ env.LINUX_ARM64_SHA256 }}`
            - macOS AMD64: `${{ env.MACOS_AMD64_SHA256 }}`
            - macOS ARM64: `${{ env.MACOS_ARM64_SHA256 }}`
            - Windows AMD64: `${{ env.WINDOWS_AMD64_SHA256 }}`

            ### What's New
            - Multi-platform support
            - Git-like filesystem for databases
            - Familiar command interface
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
