name: Build and Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      linux:
        description: 'Build Linux'
        required: false
        type: boolean
        default: true
      macos:
        description: 'Build macOS'
        required: false
        type: boolean
        default: true
      windows:
        description: 'Build Windows'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write

jobs:
  bump-version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(cargo pkgid | sed 's/.*://')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: version
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          
          echo "Bumping $RELEASE_TYPE version from $CURRENT_VERSION"
          
          case $RELEASE_TYPE in
            patch)
              cargo version patch
              ;;
            minor)
              cargo version minor
              ;;
            major)
              cargo version major
              ;;
          esac
          
          NEW_VERSION=$(cargo pkgid | sed 's/.*://')
          TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Tag: $TAG"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml Cargo.lock
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"

      - name: Create and push tag
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          git tag "$TAG"
          git push origin main
          git push origin "$TAG"

  detect-platforms:
    needs: bump-version-and-tag
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      version: ${{ needs.bump-version-and-tag.outputs.version }}
    steps:
      - name: Set platforms and version
        id: detect
        run: |
          # Build platform list from boolean inputs
          PLATFORMS=""
          
          if [ "${{ github.event.inputs.linux }}" = "true" ]; then
            PLATFORMS="$PLATFORMS linux"
          fi
          
          if [ "${{ github.event.inputs.macos }}" = "true" ]; then
            PLATFORMS="$PLATFORMS macos"
          fi
          
          if [ "${{ github.event.inputs.windows }}" = "true" ]; then
            PLATFORMS="$PLATFORMS windows"
          fi
          
          # Trim leading space
          PLATFORMS=$(echo "$PLATFORMS" | sed 's/^ *//')
          
          VERSION="${{ needs.bump-version-and-tag.outputs.version }}"
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Selected platforms: '$PLATFORMS'"
          echo "Version: $VERSION"

  build-linux:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'linux')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install ARM64 cross-compilation tools
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Verify and install Rust targets
        run: |
          echo "Installed targets:"
          rustup target list --installed
          echo "Installing ARM64 target explicitly..."
          rustup target add aarch64-unknown-linux-gnu
          echo "Verifying ARM64 target is installed:"
          rustup target list --installed | grep aarch64-unknown-linux-gnu

      - name: Configure cross-compilation environment
        run: |
          # Set up cross-compilation environment variables
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build Linux AMD64
        run: |
          echo "Building Linux AMD64..."
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p dist/linux-amd64
          cp target/x86_64-unknown-linux-gnu/release/guepard dist/linux-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-amd64.tar.gz -C dist linux-amd64/

      - name: Build Linux ARM64
        run: |
          echo "Building Linux ARM64..."
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p dist/linux-arm64
          cp target/aarch64-unknown-linux-gnu/release/guepard dist/linux-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-arm64.tar.gz -C dist linux-arm64/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-linux-*.tar.gz

  build-macos:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'macos')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-apple-darwin,aarch64-apple-darwin
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip curl
          # Install zig for reliable cross-compilation (using newer version with better macOS support)
          wget https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz
          tar -xf zig-linux-x86_64-0.13.0.tar.xz
          sudo mv zig-linux-x86_64-0.13.0/zig /usr/local/bin/
          sudo mv zig-linux-x86_64-0.13.0/lib /usr/local/lib/zig
          
          # Download macOS SDK for cross-compilation
          echo "Downloading macOS SDK..."
          curl -L https://github.com/roblabla/MacOSX-SDKs/releases/download/13.1/MacOSX13.1.sdk.tar.xz | tar xJ
          sudo mv MacOSX13.1.sdk /opt/macos-sdk
          echo "SDKROOT=/opt/macos-sdk" >> $GITHUB_ENV
          
          # Install cargo-zigbuild for reliable cross-compilation
          cargo install cargo-zigbuild

      - name: Verify and install Rust targets
        run: |
          echo "Installed targets:"
          rustup target list --installed
          echo "Installing macOS targets explicitly..."
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          echo "Verifying macOS targets are installed:"
          rustup target list --installed | grep apple-darwin

      - name: Configure cross-compilation environment
        run: |
          echo "SDKROOT=/opt/macos-sdk" >> $GITHUB_ENV
          echo "ZIG_LOCAL_CACHE_DIR=/tmp/zig-cache" >> $GITHUB_ENV
          echo "Configured environment for cross-compilation with macOS SDK at /opt/macos-sdk"

      - name: Build macOS AMD64
        run: |
          echo "Building macOS AMD64..."
          export SDKROOT=/opt/macos-sdk
          cargo zigbuild --release --target x86_64-apple-darwin --features cross-compile
          mkdir -p dist/macos-amd64
          cp target/x86_64-apple-darwin/release/guepard dist/macos-amd64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-amd64.tar.gz -C dist macos-amd64/

      - name: Build macOS ARM64
        run: |
          echo "Building macOS ARM64..."
          export SDKROOT=/opt/macos-sdk
          cargo zigbuild --release --target aarch64-apple-darwin --features cross-compile
          mkdir -p dist/macos-arm64
          cp target/aarch64-apple-darwin/release/guepard dist/macos-arm64/
          tar -czf dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-arm64.tar.gz -C dist macos-arm64/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-macos-*.tar.gz

  build-windows:
    needs: detect-platforms
    if: contains(needs.detect-platforms.outputs.platforms, 'windows')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libdbus-1-dev pkg-config zip
          # Install Windows cross-compilation tools
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Configure Windows cross-compilation environment
        run: |
          # Set up Windows cross-compilation environment variables
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      - name: Build Windows AMD64
        run: |
          echo "Building Windows AMD64..."
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir -p dist/windows-amd64
          cp target/x86_64-pc-windows-gnu/release/guepard.exe dist/windows-amd64/
          cd dist
          zip -r guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip windows-amd64/

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/guepard-cli-${{ needs.detect-platforms.outputs.version }}-windows-amd64.zip

  create-release:
    needs: [bump-version-and-tag, detect-platforms, build-linux, build-macos, build-windows]
    if: always() && needs.detect-platforms.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p dist
          # Copy artifacts to dist folder
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          find artifacts -name "*.zip" -exec cp {} dist/ \;

      - name: Calculate SHA256 checksums
        run: |
          cd dist
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              # Extract platform and architecture from filename
              if [[ "$file" == *"linux-amd64"* ]]; then
                echo "LINUX_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"linux-arm64"* ]]; then
                echo "LINUX_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-amd64"* ]]; then
                echo "MACOS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"macos-arm64"* ]]; then
                echo "MACOS_ARM64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              elif [[ "$file" == *"windows-amd64"* ]]; then
                echo "WINDOWS_AMD64_SHA256=$(shasum -a 256 "$file" | cut -d' ' -f1)" >> $GITHUB_ENV
              fi
            fi
          done

      - name: Generate Release Body
        run: |
          # Read the template file
          template=$(cat RELEASE_TEMPLATE.md)
          
          # Replace placeholders with actual values
          template=$(echo "$template" | sed "s/{{VERSION}}/${{ needs.detect-platforms.outputs.version }}/g")
          template=$(echo "$template" | sed "s/{{PLATFORMS}}/${{ needs.detect-platforms.outputs.platforms }}/g")
          template=$(echo "$template" | sed "s/{{LINUX_AMD64_SHA256}}/${{ env.LINUX_AMD64_SHA256 }}/g")
          template=$(echo "$template" | sed "s/{{LINUX_ARM64_SHA256}}/${{ env.LINUX_ARM64_SHA256 }}/g")
          template=$(echo "$template" | sed "s/{{MACOS_AMD64_SHA256}}/${{ env.MACOS_AMD64_SHA256 }}/g")
          template=$(echo "$template" | sed "s/{{MACOS_ARM64_SHA256}}/${{ env.MACOS_ARM64_SHA256 }}/g")
          template=$(echo "$template" | sed "s/{{WINDOWS_AMD64_SHA256}}/${{ env.WINDOWS_AMD64_SHA256 }}/g")
          
          # Write the processed template to a file
          echo "$template" > release_body.md
          
          # Also set as environment variable for the next step
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$template" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ needs.bump-version-and-tag.outputs.tag }}
          name: Guepard CLI ${{ needs.detect-platforms.outputs.version }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
