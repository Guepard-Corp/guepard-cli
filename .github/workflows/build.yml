name: Multi-platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux-amd64
            binary_ext: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux-arm64
            binary_ext: ""
          # Windows targets
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            platform: windows-amd64
            binary_ext: ".exe"
          - target: aarch64-pc-windows-gnu
            os: windows-latest
            platform: windows-arm64
            binary_ext: ".exe"
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            platform: macos-amd64
            binary_ext: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            platform: macos-arm64
            binary_ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64
        rustup target add ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        rustup target add ${{ matrix.target }}
        # Install MinGW for cross-compilation
        choco install mingw -y

    - name: Install cross-compilation dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        rustup target add ${{ matrix.target }}
        # Install cross for easier cross-compilation
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Build
      run: |
        # Set platform-specific features
        case "${{ matrix.target }}" in
          *apple-darwin*)
            FEATURES="--features apple-keyring"
            ;;
          *windows*)
            FEATURES="--features windows-keyring"
            ;;
          *linux*)
            FEATURES="--features linux-keyring"
            ;;
        esac
        
        cargo build --release --target ${{ matrix.target }} $FEATURES

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: gfs-${{ matrix.platform }}
        path: target/${{ matrix.target }}/release/gfs${{ matrix.binary_ext }}
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release archives
      run: |
        mkdir -p dist
        
        # Process each platform
        for platform_dir in gfs-*; do
          if [ -d "$platform_dir" ]; then
            platform=$(echo $platform_dir | sed 's/gfs-//')
            binary_name="gfs"
            
            # Determine archive format
            if [[ $platform == windows-* ]]; then
              archive_name="guepard-cli-${GITHUB_REF_NAME}-${platform}.zip"
              cd "$platform_dir"
              zip -r "../dist/$archive_name" .
              cd ..
            else
              archive_name="guepard-cli-${GITHUB_REF_NAME}-${platform}.tar.gz"
              tar -czf "dist/$archive_name" -C "$platform_dir" .
            fi
            
            echo "Created: dist/$archive_name"
          fi
        done

    - name: Generate checksums
      run: |
        cd dist
        for file in *.tar.gz *.zip; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "${file}.sha256"
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check
